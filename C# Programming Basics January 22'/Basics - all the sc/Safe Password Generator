using System;

namespace Safe_Password_Generator
{
    class Program
    {
        static void Main(string[] args)
        {
            // Да се напише програма, която генерира серия от символи като в шаблона:
            // ABxyBA
            // като при всяко генериране на нов код, стойностите на символите се увеличават с 1.Ако A надхвърли 55, се връща на 35.Ако B надхвърли 96, се връща на 64.
            //Вход
            //От конзолата се чете 1 ред:
            //•	На първия ред a – цяло число в интервала[1 … 1000]
            //•	На втория ред b – цяло число в интервала[1 … 1000]
            //•	На третия ред максимален брой генерирани пароли – цяло число в интервала[1 … 1000000]
            //Ограничения:
            //•	A е символ с ASCII стойност в диапазона[35… 55]
            //•	B е символ с ASCII стойност в диапазона[64 … 96]
            //•	x e цяло число в диапазона[1… a] 
            //•	y e цяло число в диапазона[1… b]

            //inputs
            int a = int.Parse(Console.ReadLine());
            int b = int.Parse(Console.ReadLine());
            int maxGeneratedPasswords = int.Parse(Console.ReadLine());

            int minValueOfSymbol1 = 35;
            int minValueOfSymbol2 = 64;
            int passCntr = 0;

            for (int i = 1; i <= a; i++)
            {
                for (int j = 1; j <= b; j++)
                {
                    Console.Write($"{(char)(minValueOfSymbol1)}{(char)(minValueOfSymbol2)}{i}{j}{(char)(minValueOfSymbol2)}{(char)(minValueOfSymbol1)}|");
                    passCntr++;
                    minValueOfSymbol1++;
                    if (minValueOfSymbol1 == 56)
                    {
                        minValueOfSymbol1 = 35;
                    }
                    minValueOfSymbol2++;
                    if (minValueOfSymbol2 == 97)
                    {
                        minValueOfSymbol2 = 64;
                    }
                    if (passCntr >= maxGeneratedPasswords)
                    {
                        return;
                    }
                }
            }
        }
    }
}
